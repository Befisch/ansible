---
- name: Disable and stop systemd-resolved
  systemd:
    name: systemd-resolved
    enabled: no
    state: stopped

- name: Copy reolver config
  ansible.builtin.copy:
    src: templates/resolv.conf
    dest: "/etc/resolv.conf"

- name: Create Postgresql Userdb
  import_tasks: ../../tasks/postgres-userdb.yml
  vars:
    postgres_db: "{{ pdns_postgres_db }}"
    postgres_user: "{{ pdns_postgres_user }}"
    postgres_userpass: "{{ pdns_postgres_userpass }}"
    postgres_host: "{{ pdns_postgres_host }}"
    postgres_port: "{{ pdns_postgres_port }}"

- name: Check if table exists
  become: true
  postgresql_query:
    db: "{{ pdns_postgres_db }}"
    login_user: "{{ pdns_postgres_user  }}"
    login_password: "{{ pdns_postgres_userpass   }}"
    login_host: "{{ pdns_postgres_host }}"
    login_port: "{{ pdns_postgres_port }}"
    query: "SELECT to_regclass('public.domains');"
  register: table_exists

- name: Prepare Postgres Database
  postgresql_query:
    db: "{{ pdns_postgres_db }}"
    login_user: "{{ pdns_postgres_user  }}"
    login_password: "{{ pdns_postgres_userpass   }}"
    login_host: "{{ pdns_postgres_host }}"
    login_port: "{{ pdns_postgres_port }}"
    query: "{{ lookup('file', 'templates/preparedb.sql') }}"
  when: table_exists.query_result[0].to_regclass is none

- name: Install PowerDNS Server
  apt:
    name: pdns-server
    state: present
    update_cache: true

- name: Install PowerDNS Server Backend Postgresql
  apt:
    name: pdns-backend-pgsql
    state: present
    update_cache: true

- name: Install PowerDNS Recursor
  apt:
    name: pdns-recursor
    state: present
    update_cache: true

- name: Copy PowerDNS Config
  template:
    src: templates/pdns.conf.j2
    dest: "/etc/powerdns/pdns.conf"
  notify: Restart PowerDNS service

- name: Copy PowerDNS Recursor Config
  template:
    src: templates/recursor.conf.j2
    dest: "/etc/powerdns/recursor.conf"
  notify: Restart PowerDNS Recursor service

- name: Create DNS Zones
  shell: |
    if ! pdnsutil list-zone {{ item.zonename }} > /dev/null 2>&1; then
      pdnsutil create-zone {{ item.zonename }};
    else
      echo "Zone {{ item.zonename }} already exists."
    fi
  loop: "{{ pdns_zone_entries }}"
  become: true
  register: zone_result
  changed_when: "'Creating empty zone' in zone_result.stderr"
  failed_when: false

- name: Create Reverse DNS Zones
  shell: |
    if ! pdnsutil list-zone {{ item.zonename }} > /dev/null 2>&1; then
      pdnsutil create-zone {{ item.zonename }};
    else
      echo "Zone {{ item.zonename }} already exists."
    fi
  loop: "{{ pdns_reverse_entries }}"
  become: true
  register: zone_result
  changed_when: "'Creating empty zone' in zone_result.stderr"
  failed_when: false

- name: Add DNS records for each zone
  shell: |
    if ! pdnsutil list-zone {{ item.0.zonename }} | grep "{{ entry_parts[0] }}.{{ item.0.zonename }}" > /dev/null 2>&1; then
      pdnsutil add-record {{ item.0.zonename }} {{ entry_parts[0] }} {{ entry_parts[1] }} {{ entry_parts[2] }}
    else
      echo "Record "{{ entry_parts[0] }}.{{ item.0.zonename }}" already exists."
    fi
  loop: "{{ pdns_zone_entries | subelements('entries') }}"
  vars:
    entry_parts: "{{ item.1.split(',') }}"
  when: item.1 is defined
  become: true
  register: record_result
  changed_when: "'New rrset:' in record_result.stdout"

- name: Add DNS records for each reverse zone
  shell: |
    if ! pdnsutil list-zone {{ item.0.zonename }} | grep "{{ entry_parts[0] }}.{{ item.0.zonename }}" > /dev/null 2>&1; then
      pdnsutil add-record {{ item.0.zonename }} {{ entry_parts[0] }} {{ entry_parts[1] }} {{ entry_parts[2] }}
    else
      echo "Record "{{ entry_parts[0] }}.{{ item.0.zonename }}" already exists."
    fi
  loop: "{{ pdns_reverse_entries | subelements('entries') }}"
  vars:
    entry_parts: "{{ item.1.split(',') }}"
  when: item.1 is defined
  become: true
  register: record_result
  changed_when: "'New rrset:' in record_result.stdout"

